{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ash\\\\Desktop\\\\new_aur\\\\web-dashboard\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const startRobot = async () => {\n    try {\n      const response = await fetch('/api/start', {\n        method: 'POST'\n      });\n      if (response.ok) {\n        setIsRunning(true);\n      } else {\n        alert('Failed to start the robot');\n      }\n    } catch (error) {\n      alert('Error starting the robot');\n    }\n  };\n  const stopRobot = async () => {\n    try {\n      const response = await fetch('/api/stop', {\n        method: 'POST'\n      });\n      if (response.ok) {\n        setIsRunning(false);\n      } else {\n        alert('Failed to stop the robot');\n      }\n    } catch (error) {\n      alert('Error stopping the robot');\n    }\n  };\n  const fetchImages = async () => {\n    try {\n      const response = await fetch('/api/camera/images');\n      if (response.ok) {\n        const data = await response.json();\n        setImages(data.images || []);\n      } else {\n        alert('Failed to fetch images');\n      }\n    } catch (error) {\n      alert('Error fetching images');\n    }\n  };\n  useEffect(() => {\n    fetchImages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Underwater Robot Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRobot,\n        disabled: isRunning,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRobot,\n        disabled: !isRunning,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Captured Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      children: [images.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this), images.map((imgUrl, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgUrl,\n        alt: `Captured ${index}`,\n        style: {\n          width: '200px',\n          height: '150px',\n          marginRight: '10px',\n          marginBottom: '10px',\n          objectFit: 'cover'\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchImages,\n      children: \"Refresh Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"wO0OopUc2OVj9Xp3mqJ5L1AIvNw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","images","setImages","isRunning","setIsRunning","startRobot","response","fetch","method","ok","alert","error","stopRobot","fetchImages","data","json","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","disabled","marginRight","display","flexWrap","length","map","imgUrl","index","src","alt","width","height","objectFit","_c","$RefreshReg$"],"sources":["C:/Users/Ash/Desktop/new_aur/web-dashboard/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst App: React.FC = () => {\r\n  const [images, setImages] = useState<string[]>([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  const startRobot = async () => {\r\n    try {\r\n      const response = await fetch('/api/start', { method: 'POST' });\r\n      if (response.ok) {\r\n        setIsRunning(true);\r\n      } else {\r\n        alert('Failed to start the robot');\r\n      }\r\n    } catch (error) {\r\n      alert('Error starting the robot');\r\n    }\r\n  };\r\n\r\n  const stopRobot = async () => {\r\n    try {\r\n      const response = await fetch('/api/stop', { method: 'POST' });\r\n      if (response.ok) {\r\n        setIsRunning(false);\r\n      } else {\r\n        alert('Failed to stop the robot');\r\n      }\r\n    } catch (error) {\r\n      alert('Error stopping the robot');\r\n    }\r\n  };\r\n\r\n  const fetchImages = async () => {\r\n    try {\r\n      const response = await fetch('/api/camera/images');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setImages(data.images || []);\r\n      } else {\r\n        alert('Failed to fetch images');\r\n      }\r\n    } catch (error) {\r\n      alert('Error fetching images');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchImages();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\r\n      <h1>Underwater Robot Dashboard</h1>\r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={startRobot} disabled={isRunning} style={{ marginRight: '10px' }}>\r\n          Start\r\n        </button>\r\n        <button onClick={stopRobot} disabled={!isRunning}>\r\n          Stop\r\n        </button>\r\n      </div>\r\n      <h2>Captured Images</h2>\r\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n        {images.length === 0 && <p>No images available</p>}\r\n        {images.map((imgUrl, index) => (\r\n          <img\r\n            key={index}\r\n            src={imgUrl}\r\n            alt={`Captured ${index}`}\r\n            style={{ width: '200px', height: '150px', marginRight: '10px', marginBottom: '10px', objectFit: 'cover' }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={fetchImages}>Refresh Images</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}